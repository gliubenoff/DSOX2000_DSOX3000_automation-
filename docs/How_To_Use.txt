This script fully evaluates I2C communication on HW point of view taking the following measurements:

1. DC levels for Master (SCL, SDA) 
2. DC levels for Slave (SDA Low level at ACK bit).
2. I2C signal rise/fall times
3. I2C SCL frequency 
4. I2C SCL High/Low periods
5. I2C SDA setup time
6. I2C SDA hold time
7. I2C repeated start setup time (not always implemented in communication)
8. I2C repeated start hold time (not always implemented in communication)
9. I2C start hold times
10. I2C stop setup time
11. I2C bus free time

The script works only for standard mode: 100 kbit/s.

Before starting the script a bit of preparation is required:

I. Equipment
I.1. Oscilloscope Keysight DSOX2000A or DSOX3000A, 2 channels are enough
I.2. Suitable power supply module.
I.3. DUT

II. Wire the setup
II.1. Attach oscilloscope channel 1 to I2C SCL signal
II.2. Attach oscilloscope channel 2 to I2C SDA signal
II.3. Connect oscilloscope to PC/Laptop via USB cable
II.3. Attach the power supply to the DUT

III. Setup the script
III.1. Find the oscilloscope USB address:
		- On the oscilloscope press Unit -> I/O and write down the address. Note: address displayed on oscilloscope is in decimal and shall be converted to hex
		- Open Keysight Command Expert (if installed) and find the address of the attached instrument
III.2. Open Src/DSOX_I2C_example.py with a text editor of your choice (Notepad, Notepad++, PyCharm, Eclipse etc. MS Word is not recommended although it might also work)
III.3. Modify variable 'address' providing the current oscilloscope address. 
III.4. Modify variable 'results_path' to point a location on the PC/Laptop where the results will be saved. Note: double \\ is used for hierarchy delimiter
III.5. Save and close the script file.

IV. Run the script
IV.1. Ensure continuous I2C communication (See Note 4) 
IV.2. From command prompt (Windows)/Terminal (MAC OS, Linux) navigate to the script directory
IV.3. Type "python DSOX_I2C_example.py"

Notes: 
1. The script expects continuous I2C communication in order to do its job. If you're measureing "one shot" communication such as PMIC initialization during startup 
you need to constantly restart the DUT to keep the communication going.
2. In some communications repeated start condition may not be implemented. If the script gets stuck waiting for it hit "force trigger" button on the oscilloscope. Then scrap the measurement result.
3. If erratic measurements appear in the results back them all up and rerun the script. Single run takes approximately 2 minutes so it will not take much time.
4. If the I2C bus is used only to initialize slaves during power up then supply needs to be toggled appropriately. For this reason 3 second delays are implemented after each measurement alowing the operator to restart the DUT.
If this 3 sec. window is missed the script is supposed to wait trigger condition typially not found when no communication is present. Not recommended to rely on this as glitches during power up may produce false triggers.
If EA-PS 2000-10b PSU is available it can be toggled from (another) script. Contact the author for assistance. 